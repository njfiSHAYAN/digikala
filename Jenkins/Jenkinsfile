pipeline {
    agent any
    environment {
        scm = ''
        appChanged = ''
        deployChanged = '' 
        appRegistry = "shayannjf/digiapp"
        deployRegistry = "shayannjf/digideploy"
        registryCredential = 'dockerhub_credential'
        repositoryCredential = 'digikala_repository_token'
        repositoryUrl = 'https://github.com/njfiSHAYAN/digikala.git'
        branchName = '*/jenkins'
    }
    stages {
        // Connect to git
        stage('Cloning Git') {
            steps {
                script {
                     scm = checkout([$class: 'GitSCM',
                          branches: [[name: branchName]],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [],
                          submoduleCfg: [],
                          userRemoteConfigs: [[credentialsId: repositoryCredential, url: repositoryUrl]]])
                }
            }
        }
        // Test application
        stage('Unit test') {
            steps {
                sh 'pip install -r ./application/requirements.txt'
                sh 'python3 -m unittest discover ./application/tests'
            }
        }
        // Get repository changes
        stage ('Evaluate changes') {
            steps {
                script {
                    def changes = ''
                    changes = sh (
                        script: "./Jenkins/scripts/changes.sh ${scm.GIT_PREVIOUS_COMMIT} ${scm.GIT_COMMIT}",
                        returnStdout: true
                    )
                    appChanged = sh (
                        script: "./Jenkins/scripts/appChanged.sh ${changes}",
                        returnStdout: true
                    ) 
                    deployChanged = sh (
                        script: "./Jenkins/scripts/deployChanged.sh ${changes}",
                        returnStdout: true
                    )       
                }
            }
        }
        //Building application images
        stage('Building app image') {
            steps {
                script {
                    if (appChanged.trim().equals('1')) {
                        sh "img build -t ${appRegistry}:${BUILD_TAG} ./application"
                    }
                }
            }
        }
        //Pushing application image
        stage('Pushing app image') {
            steps {
                script {
                    if (appChanged.trim().equals('1')) {
                        withCredentials([usernamePassword(credentialsId: registryCredential, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh 'img login --username $USERNAME --password $PASSWORD'
                        }   
                            sh "img push ${appRegistry}:${BUILD_TAG}"
                    }
                }
            }
        }
        //â€ŒBuilding deployment image
        stage('Building deploy image') {
            steps {
                script {
                    if (deployChanged.trim().equals('1')) {
                        sh "img build -t ${deployRegistry}:${BUILD_TAG} ./deployment"
                    }
                }
            }
        }
        //Pushing deployment image
        stage('Pushing deploy image') {
            steps {
                script {
                    if (deployChanged.trim().equals('1')) {
                        withCredentials([usernamePassword(credentialsId: registryCredential, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh 'img login --username $USERNAME --password $PASSWORD'
                        }
                            sh "img push ${deployRegistry}:${BUILD_TAG}"
                    }
                }
            }
        }
    }
}
