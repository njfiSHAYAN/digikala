pipeline {
    agent any
    environment {
        scm = ''
        registry = "shayannjf/digiapp"
        registryCredential = 'dockerhub_credential'
        repositoryCredential = 'digikala_repository_token'
        repositoryUrl = 'https://github.com/njfiSHAYAN/digikala.git'
        branchName = '*/jenkins'
    }
    stages {
        // connect to git
        stage('Cloning Git') {
            steps {
                script {
                     scm = checkout([$class: 'GitSCM',
                          branches: [[name: branchName]],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [],
                          submoduleCfg: [],
                          userRemoteConfigs: [[credentialsId: repositoryCredential, url: repositoryUrl]]])
                }
            }
        }

        stage('Unit test') {
            steps {
                sh 'pip install -r ./application/requirements.txt'
                sh 'python3 -m unittest discover ./application/tests'
            }
        }
        
        stage ('Evaluate changes') {
            steps {
                script {
                    //previous_commit = scm.GIT_PREVIOUS_COMMIT
                    //current_commit = scm.GIT_COMMIT
                    // difference = sh "git diff ${scm.GIT_PREVIOUS_COMMIT} ${scm.GIT_COMMIT}"
                    // echo difference
                    def changes = ''
                    def appChanged = ''
                    def deployChanged = '' 
                    changes = sh (
                        script: "./Jenkins/scripts/changes.sh ${scm.GIT_PREVIOUS_COMMIT} ${scm.GIT_COMMIT}",
                        returnStdout: true
                    )
                    echo changes
                    appChanged = sh (
                        script: "./Jenkins/scripts/appChanged.sh ${changes}",
                        returnStdout: true
                    ) 
                    deployChanged = sh (
                        script: "./Jenkins/scripts/deployChanged.sh ${changes}",
                        returnStdout: true
                    )
                    echo appChanged
                    echo deployChanged         
                }
            }
        }
    
        // Building Docker images
        // stage('Building image') {
        //    steps {
        //        sh "img build -t ${registry}:${BUILD_TAG} ./application"
        //    }
        // }

        // // Pushing image
        // stage('Pushing image') {
        //    steps {
        //        withCredentials([usernamePassword(credentialsId: registryCredential, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        //           sh 'img login --username $USERNAME --password $PASSWORD'
        //         }
        //           sh "img push ${registry}:${BUILD_TAG}"
        //    }
        // }
}
}
