replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: monitoring.local
      paths:
        - path: /
          pathType: Prefix
          # make sure to serviceName and servicePort this using tpl function
          serviceName: "{{ .Values.prometheus.service.name }}"
          servicePort: "{{ .Values.prometheus.service.port }}"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


# namespace is the namespace on which kubernetes resources will be deployed on
namespace: "monitoring"

# prometheus is used to deploy prometheus configurations
prometheus:
  fullnameOverride: ""
  podAnnotations: {}
  imagePullSecrets: []

  containerName: "prometheus-container"

  image:
    repository: docker.io/prom/prometheus
    pullPolicy: IfNotPresent
    tag: "v2.38.0"
  
  serviceAccount:
    create: true
    name: ""
    annotations: {}

  # runArgs:
  #   - "--config.file=/etc/prometheus/prometheus.yml"
  #   - "--storage.tsdb.path=/prometheus/"


  runArgs:
    - "--config.file={{ .Values.prometheus.configurations.config_dir }}{{ .Values.prometheus.configurations.mainConfig.file_name }}"
    - "--storage.tsdb.path=/prometheus/"

  affinity: {}

  tolerations: []

  nodeSelector: {}

  service:
    port: 9090
    name: prometheusui
  
  clusterRole:
    name: ""
    apiGroupsList:
      - apiGroups: [""]
        resources:
          - nodes
          - nodes/proxy
          - services
          - endpoints
          - pods
        verbs:
          - get
          - list
          - watch
      - apiGroups:
        - extensions
        resources:
        - ingresses
        verbs:
          - get
          - list
          - watch
    nonResourceURLsList:
      - nonResourceURLs: 
          - /metrics
        verbs: 
          - get
  
  # configurations contains different prometheus config data, such as main config, web config and rules
  # configurations exist in _helpers_prometheus.tpl file.
  # in the config map file configs written here are imported using tpl function.
  # in fact in this file "include" doesn't include any thing. tpl function includes data you specified here
  configurations:
    configMapName: ""
    # prometheus configs will be stored in config_dir
    config_dir: "/etc/prometheus/"
    mainConfig:
      file_name: "prometheus.yaml" 
      data: |-
        {{ include "monitoring.prometheus.mainConfig" . }}
    rules:
      file_name: "rules.yaml" 
      data: |-
        {{ include "monitoring.prometheus.rules" . }}
    # DO NOT FORGET TO CREATE A STRONG USERNAME AND PASSWORD
    webConfig: 
      file_name: "web.yaml"
      data: |-
        {{ include "monitoring.prometheus.webConfig" . }}



nodeExporter:



alertManager:



grafana:






