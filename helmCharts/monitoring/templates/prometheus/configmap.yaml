apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "monitoring.prometheus.cmname" . }}
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
data:
  {{ .Values.prometheus.configurations.rules.file_name }}: |-
    groups:
    - name: Instances
      rules:
      - alert: InstanceDown
        expr: up == 0
        for: 2m
        labels:
          severity: crititcal
          domain: instances
        annotations:
          description: '{{ `{{ $labels.instance }}` }} of job {{ `{{ $labels.job }}` }} has been down for more than 2 minutes.'
          summary: 'Instance {{ `{{ $labels.instance }}` }} down'
    - name: BlackboxProbe
      rules:
      - alert: AppDown
        expr: probe_success == 0
        for: 2m
        labels:
          severity: critical
          domain: application
        annotations:
          description:  '{{ `{{ $labels.instance }}` }} of job {{ `{{ $labels.job }}` }} has been down for more than 2 minutes.'
          summary: 'Application {{ `{{ $labels.instance }}` }} down'



  {{ .Values.prometheus.configurations.webConfig.file_name }}: |-
    {{- with .Values.prometheus.configurations.webConfig.authentication }}
    {{- if .enabled }}
    basic_auth_users:
      {{ htpasswd .username .password | replace ":" ": "}}
    {{- end }}
    {{ end }}

  {{ .Values.prometheus.configurations.mainConfig.file_name }}: |-
    global:
      scrape_interval: {{ .Values.prometheus.configurations.mainConfig.scrape_interval }}
      evaluation_interval: {{ .Values.prometheus.configurations.mainConfig.evaluation_interval }}
    rule_files:
      - {{ .Values.prometheus.configurations.config_dir }}{{ .Values.prometheus.configurations.rules.file_name }}
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "{{ .Values.alertManager.service.name }}.{{ .Values.namespace }}.svc:{{ .Values.alertManager.service.port }}"
      {{- with .Values.alertManager.configurations.webConfig.authentication }}
      {{- if .enabled }}
        basic_auth:
          username: {{ .username }}
          password: {{ .password }}
      {{- end }}
      {{- end }}
    scrape_configs:
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: '{{ .Values.nodeExporter.service.name }}'
          action: keep
      
      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics     
      
      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
        - role: pod

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kubernetes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_endpoints_name]
          action: drop
          regex: '{{ .Values.nodeExporter.service.name }}'
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

      - job_name: 'blackbox'
        metrics_path: /probe
        params:
          target: [{{ default .Values.prometheus.app.serviceName .Values.prometheus.blackboxTarget }}]
          module: ["http_2xx"]

        kubernetes_sd_configs:
        - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: {{ .Values.blackbox.service.name }}
          - source_labels: [__param_target]
            action: replace
            target_label: instance
            regex: (.*)
            replacement: $1


      {{- if .Values.prometheus.app.enabled }}
      - job_name: 'application'
        static_configs:
          - targets: [{{ .Values.prometheus.app.serviceName }}]
      {{- end }}
