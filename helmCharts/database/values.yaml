# Default values for database.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  repository: mariadb
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"


imagePullSecrets: []
nameOverride: "mysql"
fullnameOverride: ""
namespaceOverride: ""
clusterDomain: cluster.local


mysqlConfiguration: |
  [mysql]

  [mysqld]

  log_bin=mysql-bin
  expire_logs_days=14
  # Disabling for performance per http://severalnines.com/blog/9-tips-going-production-galera-cluster-mysql
  sync_binlog=0
  binlog_format=ROW
  default-storage-engine=innodb
  innodb_autoinc_lock_mode=2
  bind-address=0.0.0.0

  wsrep_on=ON
  wsrep_provider=/usr/lib/galera/libgalera_smm.so
  wsrep_sst_method=rsync
  wsrep_cluster_name="%cluster-name%"
  wsrep_cluster_address="gcomm://%cluster-address%"
  wsrep_node_address="%node-address%"
  wsrep_node_name="%node-name%"

podManagementPolicy: OrderedReady
replicaCount: 3
updateStrategy:
  type: RollingUpdate


galera:
  name: galera
  bootstrap:
    bootstrapFromNode: 0

existingSecret: ""

containerPorts:
  mysql: 3306
  galera: 4567
  ist: 4568
  sst: 4444

rootUser:
  user: root
  password: ""


db:
  user: ""
  password: ""
  name: ""
  allowEmptyPassword: false


livenessProbe:
  enabled: true
  ## Initializing the database could take some time
  ##
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3


readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

service:
  
  type: ClusterIP
  port: 3306
  name: mysql

  headless:
    ## @param service.headless.publishNotReadyAddresses Publish not Ready MariaDB Galera pods' IPs in the headless service.
    ## Required for peer discovery during cluster bootstrap (1st chart installation), optional afterwards.
    ##
    publishNotReadyAddresses: true


resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi


persistence:
  enabled: false
  existingClaim: ""

  subPath: ""

  mountPath: /var/lib/mysql

  selector: {}

  storageClass: ""

  annotations: {}

  labels: {}

  accessModes:
    - ReadWriteOnce

  size: 1Gi

metrics:

  enabled: true
  ## MySQL Prometheus exporter image
  ## ref: https://hub.docker.com/r/prom/mysqld-exporter
  ## @param metrics.image.registry MariaDB Prometheus exporter image registry
  ## @param metrics.image.repository MariaDB Prometheus exporter image repository
  ## @param metrics.image.tag MariaDB Prometheus exporter image tag (immutable tags are recommended)
  ## @param metrics.image.digest MariaDB Prometheus exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param metrics.image.pullPolicy MariaDB Prometheus exporter image pull policy
  ## @param metrics.image.pullSecrets MariaDB Prometheus exporter image pull secrets
  ##
  image:

    repository: prom/mysqld-exporter
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9104
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9104"
   
    clusterIP: ""
